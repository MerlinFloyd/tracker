services:
  backend:
    build:
      context: .  # Use project root as context
      dockerfile: backend/Dockerfile  # Path to Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_USER=app
      - DB_PASSWORD=yourpassword
      - DB_NAME=appdb
      - SWAGGER_HOST=localhost:8080  # For correct swagger base URL
      - BINANCE_API_KEY=iQwVGLbZOyEkUE1nuexGGuaO6WDEkngG6xYnx7hnB5TOBo4RioLVC1TSOjogUtxk
      - BINANCE_SECRET_KEY=gBwrMxtCDP4mcQie6uQBrUkgI9nZkTCSthZ4ZQA8feNNf9dbZ4Zy8wn6a6dsewaa
    depends_on:
      migrations:
        condition: service_completed_successfully
    develop:
      watch:
        - action: rebuild
          path: ./backend
          target: /app

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "80:80"
    environment:
      - REACT_APP_FIREBASE_API_KEY=AIzaSyCuFTS1L0j2nYIzDYyd0SaCtz03CN8oxdQ
      - REACT_APP_FIREBASE_AUTH_DOMAIN=horizon-7fdc6.firebaseapp.com
      - REACT_APP_FIREBASE_PROJECT_ID=horizon-7fdc6
      - REACT_APP_FIREBASE_STORAGE_BUCKET=horizon-7fdc6.appspot.com
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=441228956462
      - REACT_APP_FIREBASE_APP_ID=1:441228956462:web:adc9da22f8e1811e26e0bf
    depends_on:
      - backend
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
        - action: rebuild
          path: ./frontend/
          target: package*.json

  db:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_USER: app
      POSTGRES_DB: appdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    image: migrate/migrate
    volumes:
      - ./sql/migrations:/migrations
    command: ["-path=/migrations", "-database", "postgres://app:yourpassword@db:5432/appdb?sslmode=disable", "up"]
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

volumes:
  postgres_data: